{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.10.12","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"none","dataSources":[],"dockerImageVersionId":30822,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"code","source":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"../input/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('/kaggle/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session","metadata":{"_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19","trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"def multiplication_or_sum(num1, num2):\n    # calculate product of two number\n    product = num1 * num2\n    # check if product is less then 1000\n    if product % 2==0 :\n        return product\n    else:\n        # product is greater than 1000 calculate sum\n        return num1 + num2\n\n# first condition\nresult = multiplication_or_sum(20, 30)\nprint(\"The result is\", result)\n\n# Second condition\nresult = multiplication_or_sum(40, 30)\nprint(\"The result is\", result)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-01-09T15:25:55.365482Z","iopub.execute_input":"2025-01-09T15:25:55.365799Z","iopub.status.idle":"2025-01-09T15:25:55.372481Z","shell.execute_reply.started":"2025-01-09T15:25:55.365775Z","shell.execute_reply":"2025-01-09T15:25:55.371251Z"}},"outputs":[{"name":"stdout","text":"The result is 600\nThe result is 1200\n","output_type":"stream"}],"execution_count":8},{"cell_type":"code","source":"print(\"Printing current and previous number and their sum in a range(10)\")\nprevious_num = 0\n\n# loop from 1 to 10\nfor i in range(1, 11):\n    x_sum = previous_num + i\n    print(\"Current Number\", i, \"Previous Number \", previous_num, \" Sum: \", x_sum)\n    # modify previous number\n    # set it to the current number\n    previous_num = i","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-01-09T15:29:28.988027Z","iopub.execute_input":"2025-01-09T15:29:28.988425Z","iopub.status.idle":"2025-01-09T15:29:29.011361Z","shell.execute_reply.started":"2025-01-09T15:29:28.988396Z","shell.execute_reply":"2025-01-09T15:29:29.010072Z"}},"outputs":[{"name":"stdout","text":"Printing current and previous number and their sum in a range(10)\nCurrent Number 1 Previous Number  0  Sum:  1\nCurrent Number 2 Previous Number  1  Sum:  3\nCurrent Number 3 Previous Number  2  Sum:  5\nCurrent Number 4 Previous Number  3  Sum:  7\nCurrent Number 5 Previous Number  4  Sum:  9\nCurrent Number 6 Previous Number  5  Sum:  11\nCurrent Number 7 Previous Number  6  Sum:  13\nCurrent Number 8 Previous Number  7  Sum:  15\nCurrent Number 9 Previous Number  8  Sum:  17\nCurrent Number 10 Previous Number  9  Sum:  19\n","output_type":"stream"}],"execution_count":9},{"cell_type":"code","source":"def first_last_same(numberList):\n    print(\"Given list:\", numberList)\n    \n    first_num = numberList[0]\n    last_num = numberList[-1]\n    \n    if first_num == last_num:\n        return True\n    else:\n        return False\n\nnumbers_x = [10, 20, 30, 40, 10]\nprint(\"result is\", first_last_same(numbers_x))\n\nnumbers_y = [75, 65, 35, 75, 30]\nprint(\"result is\", first_last_same(numbers_y))","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-01-09T15:36:06.108515Z","iopub.execute_input":"2025-01-09T15:36:06.108900Z","iopub.status.idle":"2025-01-09T15:36:06.117821Z","shell.execute_reply.started":"2025-01-09T15:36:06.108873Z","shell.execute_reply":"2025-01-09T15:36:06.116548Z"}},"outputs":[{"name":"stdout","text":"Given list: [10, 20, 30, 40, 10]\nresult is True\nGiven list: [75, 65, 35, 75, 30]\nresult is False\n","output_type":"stream"}],"execution_count":10},{"cell_type":"code","source":"str_x = \"Emma is good developer. Emma is a writer\"\n# use count method of a str class\ncnt = str_x.count(\"Emma\")\nprint(cnt)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-01-09T15:38:16.936421Z","iopub.execute_input":"2025-01-09T15:38:16.936861Z","iopub.status.idle":"2025-01-09T15:38:16.942907Z","shell.execute_reply.started":"2025-01-09T15:38:16.936832Z","shell.execute_reply":"2025-01-09T15:38:16.941581Z"}},"outputs":[{"name":"stdout","text":"2\n","output_type":"stream"}],"execution_count":11},{"cell_type":"code","source":"for num in range(10):\n    for i in range(num):\n        print (num, end=\" \") #print number\n    # new line after each row to display pattern correctly\n    print(\"\\n\")","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-01-09T15:41:59.945188Z","iopub.execute_input":"2025-01-09T15:41:59.945642Z","iopub.status.idle":"2025-01-09T15:41:59.957819Z","shell.execute_reply.started":"2025-01-09T15:41:59.945613Z","shell.execute_reply":"2025-01-09T15:41:59.955443Z"}},"outputs":[{"name":"stdout","text":"\n\n1 \n\n2 2 \n\n3 3 3 \n\n4 4 4 4 \n\n5 5 5 5 5 \n\n6 6 6 6 6 6 \n\n7 7 7 7 7 7 7 \n\n8 8 8 8 8 8 8 8 \n\n9 9 9 9 9 9 9 9 9 \n\n","output_type":"stream"}],"execution_count":12},{"cell_type":"code","source":"income = 4000\ntax_payable = 0\nprint(\"Given income\", income)\n\nif income <= 10000:\n    tax_payable = 0\nelif income <= 20000:\n \n    x = income - 10000\n    # 10% tax\n    tax_payable = x * 10 / 100\nelse:\n\n    tax_payable = 0\n\n  \n    tax_payable = 10000 * 10 / 100\n\n  \n    tax_payable += (income - 20000) * 20 / 100\n\nprint(\"Total tax\", tax_payable)\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-01-09T15:45:58.227282Z","iopub.execute_input":"2025-01-09T15:45:58.227725Z","iopub.status.idle":"2025-01-09T15:45:58.234429Z","shell.execute_reply.started":"2025-01-09T15:45:58.227697Z","shell.execute_reply":"2025-01-09T15:45:58.232895Z"}},"outputs":[{"name":"stdout","text":"Given income 4000\nTotal tax 0\n","output_type":"stream"}],"execution_count":15},{"cell_type":"code","source":"num1 = int(input(\"Enter first number \"))\nnum2 = int(input(\"Enter second number \"))\n\nres = num1 * num2\nprint(\"Multiplication is\", res)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-01-09T15:50:46.313017Z","iopub.execute_input":"2025-01-09T15:50:46.313454Z","iopub.status.idle":"2025-01-09T15:50:53.180974Z","shell.execute_reply.started":"2025-01-09T15:50:46.313424Z","shell.execute_reply":"2025-01-09T15:50:53.180012Z"}},"outputs":[{"output_type":"stream","name":"stdin","text":"Enter first number  2\nEnter second number  3\n"},{"name":"stdout","text":"Multiplication is 6\n","output_type":"stream"}],"execution_count":16},{"cell_type":"code","source":"num = 8\nprint('%o' % num)\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-01-09T15:54:44.356785Z","iopub.execute_input":"2025-01-09T15:54:44.357192Z","iopub.status.idle":"2025-01-09T15:54:44.362594Z","shell.execute_reply.started":"2025-01-09T15:54:44.357164Z","shell.execute_reply":"2025-01-09T15:54:44.361429Z"}},"outputs":[{"name":"stdout","text":"10\n","output_type":"stream"}],"execution_count":17},{"cell_type":"code","source":"def sum():\n    num1=1\n    num2=2\n    print(num1+num2)\nsum()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-01-09T16:00:44.899254Z","iopub.execute_input":"2025-01-09T16:00:44.899711Z","iopub.status.idle":"2025-01-09T16:00:44.905491Z","shell.execute_reply.started":"2025-01-09T16:00:44.899675Z","shell.execute_reply":"2025-01-09T16:00:44.904324Z"}},"outputs":[{"name":"stdout","text":"3\n","output_type":"stream"}],"execution_count":19},{"cell_type":"code","source":"def calculation(a, b):\n    addition = a + b\n    subtraction = a - b\n    # return multiple values separated by comma\n    return addition, subtraction\n\n# get result in tuple format\nres = calculation(40, 10)\nprint(res)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-01-09T16:06:48.024493Z","iopub.execute_input":"2025-01-09T16:06:48.025009Z","iopub.status.idle":"2025-01-09T16:06:48.032457Z","shell.execute_reply.started":"2025-01-09T16:06:48.024971Z","shell.execute_reply":"2025-01-09T16:06:48.031023Z"}},"outputs":[{"name":"stdout","text":"(50, 30)\n","output_type":"stream"}],"execution_count":20},{"cell_type":"code","source":"def addition(num):\n    if num:\n        # call same function by reducing number by 1\n        return num + addition(num - 1)\n    else:\n        return 0\n\nres = addition(10)\nprint(res)\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-01-09T16:13:14.105492Z","iopub.execute_input":"2025-01-09T16:13:14.105898Z","iopub.status.idle":"2025-01-09T16:13:14.112244Z","shell.execute_reply.started":"2025-01-09T16:13:14.105869Z","shell.execute_reply":"2025-01-09T16:13:14.110896Z"}},"outputs":[{"name":"stdout","text":"55\n","output_type":"stream"}],"execution_count":21}]}